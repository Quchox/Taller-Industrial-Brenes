USE [TallerBrenes]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Asistencia' AND xtype='U')
BEGIN
    CREATE TABLE Asistencia (
        AsistenciaID BIGINT IDENTITY(1,1) PRIMARY KEY,
        UsuarioID BIGINT NOT NULL,
        Fecha DATE NOT NULL,
        HoraEntrada TIME NULL,
        HoraSalida TIME NULL,
        Estado VARCHAR(50),
        FOREIGN KEY (UsuarioID) REFERENCES Usuarios(UsuarioID)
    );
END
GO

-- ========================================
ALTER PROCEDURE [dbo].[MarcarEntrada]
    @UsuarioID BIGINT,
    @HoraEntrada TIME
AS
BEGIN
    SET NOCOUNT ON;
    SET LANGUAGE Spanish;

    DECLARE @Hoy DATE = CAST(GETDATE() AS DATE);
    DECLARE @DiaActualRaw VARCHAR(20) = DATENAME(WEEKDAY, @Hoy);
    DECLARE @DiaActual VARCHAR(20);
    DECLARE @DiaAnterior VARCHAR(20);
    DECLARE @HoraInicio TIME;
    DECLARE @Estado VARCHAR(50);

    -- Normalizar días
    SET @DiaActual = CASE 
        WHEN @DiaActualRaw = 'Lunes' THEN 'Lunes'
        WHEN @DiaActualRaw = 'Martes' THEN 'Martes'
        WHEN @DiaActualRaw IN ('Miércoles', 'Miercoles') THEN 'Miercoles'
        WHEN @DiaActualRaw = 'Jueves' THEN 'Jueves'
        WHEN @DiaActualRaw = 'Viernes' THEN 'Viernes'
        WHEN @DiaActualRaw IN ('Sábado', 'Sabado') THEN 'Sabado'
        WHEN @DiaActualRaw = 'Domingo' THEN 'Domingo'
        ELSE @DiaActualRaw
    END;

    -- Obtener día anterior
    SET @DiaAnterior = 
        CASE @DiaActual
            WHEN 'Lunes' THEN 'Domingo'
            WHEN 'Martes' THEN 'Lunes'
            WHEN 'Miercoles' THEN 'Martes'
            WHEN 'Jueves' THEN 'Miercoles'
            WHEN 'Viernes' THEN 'Jueves'
            WHEN 'Sabado' THEN 'Viernes'
            WHEN 'Domingo' THEN 'Sabado'
        END;

    -- Validar si ya marcó entrada
    IF EXISTS (SELECT 1 FROM Asistencia WHERE UsuarioID = @UsuarioID AND Fecha = @Hoy)
    BEGIN
        RAISERROR('Ya se registró la entrada para hoy.', 16, 1);
        RETURN;
    END

    -- Buscar horario válido (mismo día o anterior con cruce)
    SELECT TOP 1 @HoraInicio = HoraInicio
    FROM Horarios
    WHERE UsuarioID = @UsuarioID AND (
        (DiaSemana = @DiaActual AND HoraInicio < HoraFin AND @HoraEntrada BETWEEN HoraInicio AND HoraFin) OR
        (DiaSemana = @DiaAnterior AND HoraInicio > HoraFin AND @HoraEntrada <= HoraFin)
    );

    -- Determinar estado
    IF @HoraInicio IS NULL
        SET @Estado = 'Sin horario';
    ELSE IF @HoraEntrada <= @HoraInicio
        SET @Estado = 'Puntual';
    ELSE
        SET @Estado = 'Tarde';

    -- Insertar asistencia
    INSERT INTO Asistencia (UsuarioID, Fecha, HoraEntrada, Estado)
    VALUES (@UsuarioID, @Hoy, @HoraEntrada, @Estado);
END
GO
=========================================
ALTER PROCEDURE [dbo].[MarcarSalida]
    @UsuarioID BIGINT,
    @HoraSalida TIME
AS
BEGIN
    SET NOCOUNT ON;
    SET LANGUAGE Spanish;

    DECLARE @Hoy DATE = CAST(GETDATE() AS DATE);
    DECLARE @DiaActualRaw VARCHAR(20) = DATENAME(WEEKDAY, @Hoy);
    DECLARE @DiaActual VARCHAR(20);
    DECLARE @DiaAnterior VARCHAR(20);

    -- Normalizar nombres de día
    SET @DiaActual = CASE 
        WHEN @DiaActualRaw = 'Lunes' THEN 'Lunes'
        WHEN @DiaActualRaw = 'Martes' THEN 'Martes'
        WHEN @DiaActualRaw IN ('Miércoles', 'Miercoles') THEN 'Miercoles'
        WHEN @DiaActualRaw = 'Jueves' THEN 'Jueves'
        WHEN @DiaActualRaw = 'Viernes' THEN 'Viernes'
        WHEN @DiaActualRaw IN ('Sábado', 'Sabado') THEN 'Sabado'
        WHEN @DiaActualRaw = 'Domingo' THEN 'Domingo'
        ELSE @DiaActualRaw
    END;

    SET @DiaAnterior = 
        CASE @DiaActual
            WHEN 'Lunes' THEN 'Domingo'
            WHEN 'Martes' THEN 'Lunes'
            WHEN 'Miercoles' THEN 'Martes'
            WHEN 'Jueves' THEN 'Miercoles'
            WHEN 'Viernes' THEN 'Jueves'
            WHEN 'Sabado' THEN 'Viernes'
            WHEN 'Domingo' THEN 'Sabado'
    END;

    -- Determinar si el horario actual del usuario es nocturno (inicio > fin)
    DECLARE @EsHorarioNocturno BIT = 0;

    IF EXISTS (
        SELECT 1
        FROM Horarios
        WHERE UsuarioID = @UsuarioID 
          AND DiaSemana = @DiaAnterior
          AND HoraInicio > HoraFin
          AND @HoraSalida <= HoraFin
    )
    BEGIN
        SET @EsHorarioNocturno = 1;
    END

    DECLARE @FechaEntrada DATE;

    IF @EsHorarioNocturno = 1
        SET @FechaEntrada = DATEADD(DAY, -1, @Hoy);  -- marcar salida para la entrada del día anterior
    ELSE
        SET @FechaEntrada = @Hoy;

    -- Validar existencia de entrada
    IF NOT EXISTS (
        SELECT 1 
        FROM Asistencia 
        WHERE UsuarioID = @UsuarioID AND Fecha = @FechaEntrada
    )
    BEGIN
        RAISERROR('No hay entrada registrada para el día correspondiente.', 16, 1);
        RETURN;
    END

    -- Registrar la salida
    UPDATE Asistencia
    SET HoraSalida = @HoraSalida
    WHERE UsuarioID = @UsuarioID AND Fecha = @FechaEntrada;
END

=========================================
CREATE PROCEDURE ListarAsistenciaCompleta
AS
BEGIN
    SELECT AsistenciaID, UsuarioID, Fecha, HoraEntrada, HoraSalida, Estado
    FROM Asistencia
    ORDER BY Fecha DESC;
END;
